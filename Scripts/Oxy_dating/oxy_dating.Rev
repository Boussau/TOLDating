###############################################################
######################### SIMULATION:##########################
###############################################################


times_fn="TestData/timeBoundaries.txt"
aero_data <- readDiscreteCharacterData("TestData/data.nex")
taxa = aero_data.taxa()
n_taxa = taxa.size()
n_branches = 2 * n_taxa - 2

#####################
### Tree model
#####################
root_age ~ dnUniform(3.8, 4.5)

rho <- 1/50 # proportion of sampled taxa

birth ~ dnExp(10) # birth prior
death ~ dnExp(10) # death prior

tree ~ dnBDP(lambda=birth, mu=death, rho=rho, rootAge=root_age, taxa=taxa)


#####################
### Epochs and their bounds
#####################
time_bounds <- readDataDelimitedFile(file=times_fn, delimiter=" ")
n_epochs <- time_bounds.size()
for (i in 1:n_epochs) {
  epoch_times[i] <- time_bounds[i][1]
}

#####################
### Epoch-specific models of aerobiosis evolution
#####################
alpha <- 1.0
beta <- 1.0
for (i in 1:n_epochs) {
  pi_aerobe[i] ~ dnBeta(alpha,beta)
  pi_anaerobe[i] := abs(1-pi_aerobe[i])
  Q_aero[i] := fnF81(Simplex(pi_aerobe[i], pi_anaerobe[i]))
}

#####################
### Complete model of aerobiosis evolution:
#####################

pi_aerobe_root ~ dnBeta(alpha,beta)
pi_anaerobe_root := abs(1-pi_aerobe_root)
root_frequency := Simplex(pi_aerobe_root, pi_anaerobe_root)
Q_aero_epoch := fnEpoch(Q=Q_aero, times=epoch_times, rates=rep(1.0,n_epochs))

Q_aero_epoch # printing the model on stdout

#####################
### PhyloCTMC:
#####################
evo_aero ~ dnPhyloCTMC(tree=tree, rootFrequencies=root_frequency, Q=Q_aero_epoch, type="Standard", nSites=1)
writeNexus("TestData/simulated_Data.nex", evo_aero) # Saving the data to file

#####################
### Outputting the parameter values
#####################
print("\t\tQ_aeros : ")
   Q_aero[1]
   Q_aero[2]
   Q_aero[3]
   Q_aero[4]
print("\t\tbirth : ")
   birth
print("\t\tdeath : ")
   death
print("\t\tpi_aerobes : ")
   pi_aerobe[1]
   pi_aerobe[2]
   pi_aerobe[3]
   pi_aerobe[4]
print("\t\tpi_aerobe_root : ")
   pi_aerobe_root
print("\t\tRoot age : ")
   root_age
print("\t\ttree : ")
   tree

###############################################################
######################### INFERENCE:###########################
###############################################################

#####################
### Reading the simulated data and clamping to it:
#####################
aero_data <- readDiscreteCharacterData("TestData/simulated_Data.nex")
evo_aero.clamp(aero_data)

#####################
### Moves:
#####################

moves = VectorMoves()
moves.append( mvScale(root_age, weight=5) )
moves.append( mvScale(birth, weight=2) )
moves.append( mvScale(death, weight=2) )
moves.append( mvNodeTimeSlideUniform(tree, weight=n_branches/2) )
moves.append( mvSubtreeScale(tree, weight=n_branches/8) )
moves.append( mvTreeScale(tree, root_age, weight=n_branches/8) )
moves.append( mvBetaProbability(pi_aerobe[1]))
moves.append( mvBetaProbability(pi_aerobe[2]))
moves.append( mvBetaProbability(pi_aerobe[3]))
moves.append( mvBetaProbability(pi_aerobe[4]))
moves.append( mvBetaProbability(pi_aerobe_root))


#####################
### Launch the analysis:
#####################
# initialize the model object #
mymodel = model(tree)

# Create a vector of monitors #
monitors = VectorMonitors()
# 1. for the full model #
monitors.append( mnModel(filename="output/test.log", printgen=10) )
# 2. the tree #
monitors.append( mnFile(filename="output/test.trees", printgen=10, tree) )
# 3. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

# Run the MCMC #
mymcmc.run(generations=20000, tuningInterval=200)

# check the performance of the MCMC/moves
mymcmc.operatorSummary()

# Read in the tree trace and construct the consensus tree tree #
trace = readTreeTrace("output/test.trees", treetype="clock")
trace.setBurnin(0.25)

# Summarize tree trace and the consensus tree to file
mapTree(trace, file="output/test_map.tre")
consensusTree(trace, file="output/test_majrule.tre")

# Quit RevBayes #
q()
