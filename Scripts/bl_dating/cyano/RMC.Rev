###########
# Options #
###########
handle="cyano"
rate_model="UGAM"
ctmc="BL"
tree_model="BD"
constrain=true
PRIOR=false
ignore_calibrations=true

root_max=1.9
extension = ".19"

mcmc_length = 3000000
mcmc_burnin = 10000
mcmc_nchains = 1
mcmc_printgen = 1000

time_moves=true
add_moves=true
hyper_weigth=3.0

#set initial rates according to initial tree
initialize_rates=true

#reading bug fix
var_scaling=1e6

#inital root heigth to contorl time units
initial_root_height=1.4

#calibrations
calib_file="calib.Rev"
#constraints
cons_file="CyanoAllconstraints"

#Starting tree
tree_file="CyanoMT"
tree <- readTrees(tree_file)[1]
tree.makeUltrametric()

#
stat_tree="cyano_stat.trees"

if (ctmc!="BL")
{
alignment_file=handle+".fst"
data <- readDiscreteCharacterData(alignment_file)
}

###########
# Options #
###########

# set my move index
mvi = 1
mni = 0

# Get some useful variables from the data. We need these later on.
n_species <- tree.ntips()
n_branches <- 2*n_species - 2
taxa <- tree.taxa()

##############
# Root Prior #
##############
root_time ~ dnUniform(lower=0.0, upper=root_max)

################
# Constraints  #
################
if (constrain) {
extension=extension+"_cons"
constraints <- readRelativeNodeAgeConstraints(file=cons_file);
}

##############
# Tree model #
##############
source(tree_model+".Rev")
### add some moves that change the ages of the nodes in the tree
if (time_moves)
{
	moves[mvi++] = mvScale(root_time, weight=1.0, lambda=0.1)
	moves[mvi++] = mvSubtreeScale(psi, weight=1.0*n_branches)
	moves[mvi++] = mvNodeTimeSlideUniform(psi, weight=1.0*n_branches)
	moves[mvi++] = mvLayeredScaleProposal(tree=psi, lambda=0.1, tune=true, weight=1.0*n_branches)
}

# We rescale the tree so that the root age is initial_root_height
tree.rescale( initial_root_height / tree.rootAge() )
# We fix the tree
psi.setValue(tree)

#read mean and var bls
if (ctmc=="BL" || initialize_rates) source("readBLs.Rev");

################
# Calibrations #
################
if (!ignore_calibrations) {source(calib_file)}

################
# Rate Model   #
################
source(rate_model+".Rev")

################
# CTMC         #
################
source(ctmc+".Rev")

#some things we would like to see in the .log 
for(i in 1:n_branches)
{
  ages[i] := psi.nodeAge(i) 
}

#############
# THE Model #
#############
mymodel = model(branch_rates)

fname_stem=handle+extension
monitors[++mni] = mnModel(filename=fname_stem+".log",printgen=mcmc_printgen, separator = TAB)
monitors[++mni] = mnStochasticVariable(filename=fname_stem+"_Stoch.log",printgen=mcmc_printgen)

monitors[++mni] = mnExtNewick(filename=fname_stem+".trees", isNodeParameter=FALSE, printgen=mcmc_printgen, separator = TAB, tree=psi, branch_rates)
monitors[++mni] = mnScreen(printgen=mcmc_printgen, mean_rt, var_rt,root_time)

#mymcmc = mcmcmc(mymodel, monitors, moves, nruns=1, nchains=24)

mymcmc = mcmc(mymodel, monitors, moves, nruns=1)

if (mcmc_burnin>0) mymcmc.burnin(generations=mcmc_burnin,tuningInterval=mcmc_burnin,underPrior=PRIOR);
mymcmc.run(generations=mcmc_length,underPrior=PRIOR)

mymcmc.operatorSummary()

# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace = readTreeTrace(fname_stem+".trees", treetype="clock", burnin=0.25)

map_tree = mapTree(treetrace,fname_stem+".tree")

# you may want to quit RevBayes now
q()

